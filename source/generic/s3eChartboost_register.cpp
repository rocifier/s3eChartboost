/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */
/*
 * This file contains the automatically generated loader-side
 * functions that form part of the extension.
 *
 * This file is awlays compiled into all loaders but compiles
 * to nothing if this extension is not enabled in the loader
 * at build time.
 */
#include "IwDebug.h"
#include "s3eChartboost_autodefs.h"
#include "s3eEdk.h"
#include "s3eChartboost.h"
//Declarations of Init and Term functions
extern s3eResult s3eChartboostInit();
extern void s3eChartboostTerminate();


// On platforms that use a seperate UI/OS thread we can autowrap functions
// here.   Note that we can't use the S3E_USE_OS_THREAD define since this
// code is oftern build standalone, outside the main loader build.
#if defined I3D_OS_IPHONE || defined I3D_OS_OSX || defined I3D_OS_LINUX || defined I3D_OS_WINDOWS

static void s3eChartboostSetAppID_wrap(const char* id)
{
    IwTrace(CHARTBOOST_VERBOSE, ("calling s3eChartboost func on main thread: s3eChartboostSetAppID"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eChartboostSetAppID, 1, id);
}

static void s3eChartboostSetAppSignature_wrap(const char* signature)
{
    IwTrace(CHARTBOOST_VERBOSE, ("calling s3eChartboost func on main thread: s3eChartboostSetAppSignature"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eChartboostSetAppSignature, 1, signature);
}

static void s3eChartboostInstall_wrap()
{
    IwTrace(CHARTBOOST_VERBOSE, ("calling s3eChartboost func on main thread: s3eChartboostInstall"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eChartboostInstall, 0);
}

static void s3eChartboostCacheInterstitial_wrap(const char* name)
{
    IwTrace(CHARTBOOST_VERBOSE, ("calling s3eChartboost func on main thread: s3eChartboostCacheInterstitial"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eChartboostCacheInterstitial, 1, name);
}

static void s3eChartboostShowInterstitial_wrap(const char* name)
{
    IwTrace(CHARTBOOST_VERBOSE, ("calling s3eChartboost func on main thread: s3eChartboostShowInterstitial"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eChartboostShowInterstitial, 1, name);
}

static void s3eChartboostCacheMoreApps_wrap()
{
    IwTrace(CHARTBOOST_VERBOSE, ("calling s3eChartboost func on main thread: s3eChartboostCacheMoreApps"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eChartboostCacheMoreApps, 0);
}

static void s3eChartboostShowMoreApps_wrap()
{
    IwTrace(CHARTBOOST_VERBOSE, ("calling s3eChartboost func on main thread: s3eChartboostShowMoreApps"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eChartboostShowMoreApps, 0);
}

#define s3eChartboostSetAppID s3eChartboostSetAppID_wrap
#define s3eChartboostSetAppSignature s3eChartboostSetAppSignature_wrap
#define s3eChartboostInstall s3eChartboostInstall_wrap
#define s3eChartboostCacheInterstitial s3eChartboostCacheInterstitial_wrap
#define s3eChartboostShowInterstitial s3eChartboostShowInterstitial_wrap
#define s3eChartboostCacheMoreApps s3eChartboostCacheMoreApps_wrap
#define s3eChartboostShowMoreApps s3eChartboostShowMoreApps_wrap

#endif

void s3eChartboostRegisterExt()
{
    /* fill in the function pointer struct for this extension */
    void* funcPtrs[7];
    funcPtrs[0] = (void*)s3eChartboostSetAppID;
    funcPtrs[1] = (void*)s3eChartboostSetAppSignature;
    funcPtrs[2] = (void*)s3eChartboostInstall;
    funcPtrs[3] = (void*)s3eChartboostCacheInterstitial;
    funcPtrs[4] = (void*)s3eChartboostShowInterstitial;
    funcPtrs[5] = (void*)s3eChartboostCacheMoreApps;
    funcPtrs[6] = (void*)s3eChartboostShowMoreApps;

    /*
     * Flags that specify the extension's use of locking and stackswitching
     */
    int flags[7] = { 0 };

    /*
     * Register the extension
     */
    s3eEdkRegister("s3eChartboost", funcPtrs, sizeof(funcPtrs), flags, s3eChartboostInit, s3eChartboostTerminate, 0);
}

#if !defined S3E_BUILD_S3ELOADER

#if defined S3E_EDK_USE_STATIC_INIT_ARRAY
int s3eChartboostStaticInit()
{
    void** p = g_StaticInitArray;
    void* end = p + g_StaticArrayLen;
    while (*p) p++;
    if (p < end)
        *p = (void*)&s3eChartboostRegisterExt;
    return 0;
}

int g_s3eChartboostVal = s3eChartboostStaticInit();

#elif defined S3E_EDK_USE_DLLS
S3E_EXTERN_C S3E_DLL_EXPORT void RegisterExt()
{
    s3eChartboostRegisterExt();
}
#endif

#endif
